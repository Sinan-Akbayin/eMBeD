
001HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000500  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006a8  080006b0  000106b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006a8  080006a8  000106b0  2**0
                  CONTENTS
  4 .ARM          00000000  080006a8  080006a8  000106b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a8  080006b0  000106b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a8  080006a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006ac  080006ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000106b0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000106b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000485d  00000000  00000000  000106da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000384  00000000  00000000  00014f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000152c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  00015380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002788  00000000  00000000  00015418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ec3  00000000  00000000  00017ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a77f  00000000  00000000  00018a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000231e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000250  00000000  00000000  00023234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000690 	.word	0x08000690

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000690 	.word	0x08000690

080001e8 <GPIO_Port_CLK_Enable>:
 */


#include "STM32F4xx_GPIO.h"

extern void GPIO_Port_CLK_Enable(Port_Name PORT){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]

	switch(PORT){
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b0a      	cmp	r3, #10
 80001f6:	d85b      	bhi.n	80002b0 <GPIO_Port_CLK_Enable+0xc8>
 80001f8:	a201      	add	r2, pc, #4	; (adr r2, 8000200 <GPIO_Port_CLK_Enable+0x18>)
 80001fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001fe:	bf00      	nop
 8000200:	0800022d 	.word	0x0800022d
 8000204:	08000239 	.word	0x08000239
 8000208:	08000245 	.word	0x08000245
 800020c:	08000251 	.word	0x08000251
 8000210:	0800025d 	.word	0x0800025d
 8000214:	08000269 	.word	0x08000269
 8000218:	08000275 	.word	0x08000275
 800021c:	08000281 	.word	0x08000281
 8000220:	0800028d 	.word	0x0800028d
 8000224:	08000299 	.word	0x08000299
 8000228:	080002a5 	.word	0x080002a5
	case 0:
		RCC->AHB1ENR.GPIOAEN = 1;
 800022c:	4a23      	ldr	r2, [pc, #140]	; (80002bc <GPIO_Port_CLK_Enable+0xd4>)
 800022e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000230:	f043 0301 	orr.w	r3, r3, #1
 8000234:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000236:	e03b      	b.n	80002b0 <GPIO_Port_CLK_Enable+0xc8>
	case 1:
		RCC->AHB1ENR.GPIOBEN = 1;
 8000238:	4a20      	ldr	r2, [pc, #128]	; (80002bc <GPIO_Port_CLK_Enable+0xd4>)
 800023a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800023c:	f043 0302 	orr.w	r3, r3, #2
 8000240:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000242:	e035      	b.n	80002b0 <GPIO_Port_CLK_Enable+0xc8>
	case 2:
		RCC->AHB1ENR.GPIOCEN = 1;
 8000244:	4a1d      	ldr	r2, [pc, #116]	; (80002bc <GPIO_Port_CLK_Enable+0xd4>)
 8000246:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 800024e:	e02f      	b.n	80002b0 <GPIO_Port_CLK_Enable+0xc8>
	case 3:
		RCC->AHB1ENR.GPIODEN = 1;
 8000250:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <GPIO_Port_CLK_Enable+0xd4>)
 8000252:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000254:	f043 0308 	orr.w	r3, r3, #8
 8000258:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 800025a:	e029      	b.n	80002b0 <GPIO_Port_CLK_Enable+0xc8>
	case 4:
		RCC->AHB1ENR.GPIOEEN = 1;
 800025c:	4a17      	ldr	r2, [pc, #92]	; (80002bc <GPIO_Port_CLK_Enable+0xd4>)
 800025e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000260:	f043 0310 	orr.w	r3, r3, #16
 8000264:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000266:	e023      	b.n	80002b0 <GPIO_Port_CLK_Enable+0xc8>
	case 5:
		RCC->AHB1ENR.GPIOFEN = 1;
 8000268:	4a14      	ldr	r2, [pc, #80]	; (80002bc <GPIO_Port_CLK_Enable+0xd4>)
 800026a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800026c:	f043 0320 	orr.w	r3, r3, #32
 8000270:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000272:	e01d      	b.n	80002b0 <GPIO_Port_CLK_Enable+0xc8>
	case 6:
		RCC->AHB1ENR.GPIOGEN = 1;
 8000274:	4a11      	ldr	r2, [pc, #68]	; (80002bc <GPIO_Port_CLK_Enable+0xd4>)
 8000276:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800027c:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 800027e:	e017      	b.n	80002b0 <GPIO_Port_CLK_Enable+0xc8>
	case 7:
		RCC->AHB1ENR.GPIOHEN = 1;
 8000280:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <GPIO_Port_CLK_Enable+0xd4>)
 8000282:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000288:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 800028a:	e011      	b.n	80002b0 <GPIO_Port_CLK_Enable+0xc8>
	case 8:
		RCC->AHB1ENR.GPIOIEN = 1;
 800028c:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <GPIO_Port_CLK_Enable+0xd4>)
 800028e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000294:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 8000296:	e00b      	b.n	80002b0 <GPIO_Port_CLK_Enable+0xc8>
	case 9:
		RCC->AHB1ENR.GPIOJEN = 1;
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <GPIO_Port_CLK_Enable+0xd4>)
 800029a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800029c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80002a2:	e005      	b.n	80002b0 <GPIO_Port_CLK_Enable+0xc8>
	case 10:
		RCC->AHB1ENR.GPIOKEN = 1;
 80002a4:	4a05      	ldr	r2, [pc, #20]	; (80002bc <GPIO_Port_CLK_Enable+0xd4>)
 80002a6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80002a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
		break;
 80002ae:	bf00      	nop
	}

}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800

080002c0 <GPIO_Pin_Initialize>:
	}

}

extern void GPIO_Pin_Initialize(Port_Name PORT, uint8_t PIN_NUMBER, Pin_Mode MODE, Pin_Output_Type OTYPE, Pin_Output_Speed OSPEED, Pin_PUPD PULLUPDOWN)
{
 80002c0:	b590      	push	{r4, r7, lr}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4604      	mov	r4, r0
 80002c8:	4608      	mov	r0, r1
 80002ca:	4611      	mov	r1, r2
 80002cc:	461a      	mov	r2, r3
 80002ce:	4623      	mov	r3, r4
 80002d0:	71fb      	strb	r3, [r7, #7]
 80002d2:	4603      	mov	r3, r0
 80002d4:	71bb      	strb	r3, [r7, #6]
 80002d6:	460b      	mov	r3, r1
 80002d8:	717b      	strb	r3, [r7, #5]
 80002da:	4613      	mov	r3, r2
 80002dc:	713b      	strb	r3, [r7, #4]

	GPIO_Port_CLK_Enable(PORT);								//Enabling the corresponding GPIO Clock
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff81 	bl	80001e8 <GPIO_Port_CLK_Enable>

	GPIO->PORT[PORT].MODER &= ~(0x3<<(PIN_NUMBER*2));		//Clearing the mode register
 80002e6:	4a4d      	ldr	r2, [pc, #308]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	029b      	lsls	r3, r3, #10
 80002ec:	4413      	add	r3, r2
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	79bb      	ldrb	r3, [r7, #6]
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	2103      	movs	r1, #3
 80002f6:	fa01 f303 	lsl.w	r3, r1, r3
 80002fa:	43db      	mvns	r3, r3
 80002fc:	4618      	mov	r0, r3
 80002fe:	4947      	ldr	r1, [pc, #284]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	4002      	ands	r2, r0
 8000304:	029b      	lsls	r3, r3, #10
 8000306:	440b      	add	r3, r1
 8000308:	601a      	str	r2, [r3, #0]

	GPIO->PORT[PORT].MODER |= MODE<<(PIN_NUMBER*2);			//Setting the mode register
 800030a:	4a44      	ldr	r2, [pc, #272]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	029b      	lsls	r3, r3, #10
 8000310:	4413      	add	r3, r2
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	7979      	ldrb	r1, [r7, #5]
 8000316:	79bb      	ldrb	r3, [r7, #6]
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	4618      	mov	r0, r3
 8000320:	493e      	ldr	r1, [pc, #248]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	4302      	orrs	r2, r0
 8000326:	029b      	lsls	r3, r3, #10
 8000328:	440b      	add	r3, r1
 800032a:	601a      	str	r2, [r3, #0]

	GPIO->PORT[PORT].OTYPER &= ~(0x1<<PIN_NUMBER);			//Clearing the output type register
 800032c:	4a3b      	ldr	r2, [pc, #236]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	029b      	lsls	r3, r3, #10
 8000332:	4413      	add	r3, r2
 8000334:	3304      	adds	r3, #4
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	79bb      	ldrb	r3, [r7, #6]
 800033a:	2101      	movs	r1, #1
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	43db      	mvns	r3, r3
 8000342:	4618      	mov	r0, r3
 8000344:	4935      	ldr	r1, [pc, #212]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	4002      	ands	r2, r0
 800034a:	029b      	lsls	r3, r3, #10
 800034c:	440b      	add	r3, r1
 800034e:	3304      	adds	r3, #4
 8000350:	601a      	str	r2, [r3, #0]

	GPIO->PORT[PORT].OTYPER |= OTYPE<<PIN_NUMBER;			//Setting the output type register
 8000352:	4a32      	ldr	r2, [pc, #200]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	029b      	lsls	r3, r3, #10
 8000358:	4413      	add	r3, r2
 800035a:	3304      	adds	r3, #4
 800035c:	681a      	ldr	r2, [r3, #0]
 800035e:	7939      	ldrb	r1, [r7, #4]
 8000360:	79bb      	ldrb	r3, [r7, #6]
 8000362:	fa01 f303 	lsl.w	r3, r1, r3
 8000366:	4618      	mov	r0, r3
 8000368:	492c      	ldr	r1, [pc, #176]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4302      	orrs	r2, r0
 800036e:	029b      	lsls	r3, r3, #10
 8000370:	440b      	add	r3, r1
 8000372:	3304      	adds	r3, #4
 8000374:	601a      	str	r2, [r3, #0]

	GPIO->PORT[PORT].OSPEEDR &= ~(0x3<<(PIN_NUMBER*2));		//Clearing the output speed register
 8000376:	4a29      	ldr	r2, [pc, #164]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	029b      	lsls	r3, r3, #10
 800037c:	4413      	add	r3, r2
 800037e:	3308      	adds	r3, #8
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	79bb      	ldrb	r3, [r7, #6]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	2103      	movs	r1, #3
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	4618      	mov	r0, r3
 8000390:	4922      	ldr	r1, [pc, #136]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4002      	ands	r2, r0
 8000396:	029b      	lsls	r3, r3, #10
 8000398:	440b      	add	r3, r1
 800039a:	3308      	adds	r3, #8
 800039c:	601a      	str	r2, [r3, #0]

	GPIO->PORT[PORT].OSPEEDR |=  OSPEED<<(PIN_NUMBER*2);	//Setting the output speed register
 800039e:	4a1f      	ldr	r2, [pc, #124]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	029b      	lsls	r3, r3, #10
 80003a4:	4413      	add	r3, r2
 80003a6:	3308      	adds	r3, #8
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	7e39      	ldrb	r1, [r7, #24]
 80003ac:	79bb      	ldrb	r3, [r7, #6]
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	4618      	mov	r0, r3
 80003b6:	4919      	ldr	r1, [pc, #100]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	4302      	orrs	r2, r0
 80003bc:	029b      	lsls	r3, r3, #10
 80003be:	440b      	add	r3, r1
 80003c0:	3308      	adds	r3, #8
 80003c2:	601a      	str	r2, [r3, #0]

	GPIO->PORT[PORT].PUPDR &= ~(0x3<<(PIN_NUMBER*2));		//Clearing the pull up pull down register
 80003c4:	4a15      	ldr	r2, [pc, #84]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	029b      	lsls	r3, r3, #10
 80003ca:	4413      	add	r3, r2
 80003cc:	330c      	adds	r3, #12
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	79bb      	ldrb	r3, [r7, #6]
 80003d2:	005b      	lsls	r3, r3, #1
 80003d4:	2103      	movs	r1, #3
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	43db      	mvns	r3, r3
 80003dc:	4618      	mov	r0, r3
 80003de:	490f      	ldr	r1, [pc, #60]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	4002      	ands	r2, r0
 80003e4:	029b      	lsls	r3, r3, #10
 80003e6:	440b      	add	r3, r1
 80003e8:	330c      	adds	r3, #12
 80003ea:	601a      	str	r2, [r3, #0]

	GPIO->PORT[PORT].PUPDR |=  PULLUPDOWN<<(PIN_NUMBER*2);  //Setting the pull up pull down register
 80003ec:	4a0b      	ldr	r2, [pc, #44]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	029b      	lsls	r3, r3, #10
 80003f2:	4413      	add	r3, r2
 80003f4:	330c      	adds	r3, #12
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	7f39      	ldrb	r1, [r7, #28]
 80003fa:	79bb      	ldrb	r3, [r7, #6]
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000402:	4618      	mov	r0, r3
 8000404:	4905      	ldr	r1, [pc, #20]	; (800041c <GPIO_Pin_Initialize+0x15c>)
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	4302      	orrs	r2, r0
 800040a:	029b      	lsls	r3, r3, #10
 800040c:	440b      	add	r3, r1
 800040e:	330c      	adds	r3, #12
 8000410:	601a      	str	r2, [r3, #0]

}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bd90      	pop	{r4, r7, pc}
 800041a:	bf00      	nop
 800041c:	40020000 	.word	0x40020000

08000420 <GPIO_Pin_Read>:

	}
}

extern uint8_t GPIO_Pin_Read(Port_Name PORT, uint8_t PIN_NUMBER)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	460a      	mov	r2, r1
 800042a:	71fb      	strb	r3, [r7, #7]
 800042c:	4613      	mov	r3, r2
 800042e:	71bb      	strb	r3, [r7, #6]

	return (uint8_t)((GPIO->PORT[PORT].IDR >> PIN_NUMBER) & 0x1);
 8000430:	4a08      	ldr	r2, [pc, #32]	; (8000454 <GPIO_Pin_Read+0x34>)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	029b      	lsls	r3, r3, #10
 8000436:	4413      	add	r3, r2
 8000438:	3310      	adds	r3, #16
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	79bb      	ldrb	r3, [r7, #6]
 800043e:	fa22 f303 	lsr.w	r3, r2, r3
 8000442:	b2db      	uxtb	r3, r3
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	b2db      	uxtb	r3, r3

}
 800044a:	4618      	mov	r0, r3
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	40020000 	.word	0x40020000

08000458 <GPIO_Pin_Write>:
	return (uint16_t)((GPIO->PORT[PORT].IDR));

}

extern void GPIO_Pin_Write(Port_Name PORT, uint8_t PIN_NUMBER, Pin_State State)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
 8000462:	460b      	mov	r3, r1
 8000464:	71bb      	strb	r3, [r7, #6]
 8000466:	4613      	mov	r3, r2
 8000468:	717b      	strb	r3, [r7, #5]

	GPIO->PORT[PORT].ODR = (GPIO->PORT[PORT].ODR & ~(0x1 << PIN_NUMBER)) | (State << PIN_NUMBER);
 800046a:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <GPIO_Pin_Write+0x4c>)
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	029b      	lsls	r3, r3, #10
 8000470:	4413      	add	r3, r2
 8000472:	3314      	adds	r3, #20
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	79ba      	ldrb	r2, [r7, #6]
 8000478:	2101      	movs	r1, #1
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	43d2      	mvns	r2, r2
 8000480:	401a      	ands	r2, r3
 8000482:	7979      	ldrb	r1, [r7, #5]
 8000484:	79bb      	ldrb	r3, [r7, #6]
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	4618      	mov	r0, r3
 800048c:	4905      	ldr	r1, [pc, #20]	; (80004a4 <GPIO_Pin_Write+0x4c>)
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	4302      	orrs	r2, r0
 8000492:	029b      	lsls	r3, r3, #10
 8000494:	440b      	add	r3, r1
 8000496:	3314      	adds	r3, #20
 8000498:	601a      	str	r2, [r3, #0]

}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40020000 	.word	0x40020000

080004a8 <main>:
void SysClockConfig(void);

uint8_t a;

int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af02      	add	r7, sp, #8

	SysClockConfig();
 80004ae:	f000 f81f 	bl	80004f0 <SysClockConfig>

	GPIO_Pin_Initialize(PORTA, PA0, MODE_INPUT, OTYPE_PUSHPULL, OSPEED_VERYHIGH, PUPD_FLOAT);
 80004b2:	2300      	movs	r3, #0
 80004b4:	9301      	str	r3, [sp, #4]
 80004b6:	2303      	movs	r3, #3
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	2300      	movs	r3, #0
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2000      	movs	r0, #0
 80004c2:	f7ff fefd 	bl	80002c0 <GPIO_Pin_Initialize>

	GPIO_Pin_Initialize(PORTD, PD12, MODE_OUTPUT, OTYPE_PUSHPULL, OSPEED_MEDIUM, PUPD_FLOAT);
 80004c6:	2300      	movs	r3, #0
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	2301      	movs	r3, #1
 80004cc:	9300      	str	r3, [sp, #0]
 80004ce:	2300      	movs	r3, #0
 80004d0:	2201      	movs	r2, #1
 80004d2:	210c      	movs	r1, #12
 80004d4:	2003      	movs	r0, #3
 80004d6:	f7ff fef3 	bl	80002c0 <GPIO_Pin_Initialize>

    /* Loop forever */
	while(1){

		GPIO_Pin_Write(PORTD, PD12, GPIO_Pin_Read(PORTA,PA0));
 80004da:	2100      	movs	r1, #0
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff ff9f 	bl	8000420 <GPIO_Pin_Read>
 80004e2:	4603      	mov	r3, r0
 80004e4:	461a      	mov	r2, r3
 80004e6:	210c      	movs	r1, #12
 80004e8:	2003      	movs	r0, #3
 80004ea:	f7ff ffb5 	bl	8000458 <GPIO_Pin_Write>
 80004ee:	e7f4      	b.n	80004da <main+0x32>

080004f0 <SysClockConfig>:
	}

}

void SysClockConfig(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

	RCC->CR.HSEON = 1;				//Enabling the high speed external oscillator (HSE)
 80004f4:	4a3c      	ldr	r2, [pc, #240]	; (80005e8 <SysClockConfig+0xf8>)
 80004f6:	6813      	ldr	r3, [r2, #0]
 80004f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004fc:	6013      	str	r3, [r2, #0]

	while(!RCC->CR.HSERDY);			//Waiting for the HSE to stabilize
 80004fe:	bf00      	nop
 8000500:	4b39      	ldr	r3, [pc, #228]	; (80005e8 <SysClockConfig+0xf8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f8      	beq.n	8000500 <SysClockConfig+0x10>

	RCC->APB1ENR.PWREN = 1;			//Enabling the power interface clock
 800050e:	4a36      	ldr	r2, [pc, #216]	; (80005e8 <SysClockConfig+0xf8>)
 8000510:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000516:	6413      	str	r3, [r2, #64]	; 0x40

	PWR->CR.VOS = 1;				//Set to voltage scale 1 (for high power)
 8000518:	4a34      	ldr	r2, [pc, #208]	; (80005ec <SysClockConfig+0xfc>)
 800051a:	6813      	ldr	r3, [r2, #0]
 800051c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000520:	6013      	str	r3, [r2, #0]

	FLASH->ACR.PRFTEN = 1;			//Prefetch is enabled
 8000522:	4a33      	ldr	r2, [pc, #204]	; (80005f0 <SysClockConfig+0x100>)
 8000524:	6813      	ldr	r3, [r2, #0]
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]

	FLASH->ACR.ICEN = 1; 			//Instruction cache is enabled is enabled
 800052c:	4a30      	ldr	r2, [pc, #192]	; (80005f0 <SysClockConfig+0x100>)
 800052e:	6813      	ldr	r3, [r2, #0]
 8000530:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000534:	6013      	str	r3, [r2, #0]

	FLASH->ACR.DCEN = 1;			//Data cache is enabled
 8000536:	4a2e      	ldr	r2, [pc, #184]	; (80005f0 <SysClockConfig+0x100>)
 8000538:	6813      	ldr	r3, [r2, #0]
 800053a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800053e:	6013      	str	r3, [r2, #0]

	FLASH->ACR.LATENCY = 5;			//Five wait states (see Table 10 on page 80 in RM0090)
 8000540:	4a2b      	ldr	r2, [pc, #172]	; (80005f0 <SysClockConfig+0x100>)
 8000542:	6813      	ldr	r3, [r2, #0]
 8000544:	2105      	movs	r1, #5
 8000546:	f361 0302 	bfi	r3, r1, #0, #3
 800054a:	6013      	str	r3, [r2, #0]

	RCC->CFGR.HPRE = 0;				//Setting the AHB1 clock divider to 1
 800054c:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <SysClockConfig+0xf8>)
 800054e:	6893      	ldr	r3, [r2, #8]
 8000550:	f36f 1307 	bfc	r3, #4, #4
 8000554:	6093      	str	r3, [r2, #8]

	RCC->CFGR.PPRE1 = 0b101;		//Setting the APB1 clock divider to 4
 8000556:	4a24      	ldr	r2, [pc, #144]	; (80005e8 <SysClockConfig+0xf8>)
 8000558:	6893      	ldr	r3, [r2, #8]
 800055a:	2105      	movs	r1, #5
 800055c:	f361 238c 	bfi	r3, r1, #10, #3
 8000560:	6093      	str	r3, [r2, #8]

	RCC->CFGR.PPRE2 = 0b100;		//Setting the APB2 clock divider to 2
 8000562:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <SysClockConfig+0xf8>)
 8000564:	6893      	ldr	r3, [r2, #8]
 8000566:	2104      	movs	r1, #4
 8000568:	f361 334f 	bfi	r3, r1, #13, #3
 800056c:	6093      	str	r3, [r2, #8]

	RCC->PLLCFGR.PLLM = 8;			//Setting the M value of the PLL
 800056e:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <SysClockConfig+0xf8>)
 8000570:	6853      	ldr	r3, [r2, #4]
 8000572:	2108      	movs	r1, #8
 8000574:	f361 0305 	bfi	r3, r1, #0, #6
 8000578:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR.PLLN = 336;		//Setting the N value of the PLL
 800057a:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <SysClockConfig+0xf8>)
 800057c:	6853      	ldr	r3, [r2, #4]
 800057e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8000582:	f361 138e 	bfi	r3, r1, #6, #9
 8000586:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR.PLLP = 0;			//Setting the P value of the PLL
 8000588:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <SysClockConfig+0xf8>)
 800058a:	6853      	ldr	r3, [r2, #4]
 800058c:	f36f 4311 	bfc	r3, #16, #2
 8000590:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR.PLLQ = 7;			//Setting the Q value of the PLL
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <SysClockConfig+0xf8>)
 8000594:	6853      	ldr	r3, [r2, #4]
 8000596:	2107      	movs	r1, #7
 8000598:	f361 631b 	bfi	r3, r1, #24, #4
 800059c:	6053      	str	r3, [r2, #4]

	RCC->PLLCFGR.PLLSRC = 1;		//Setting HSE as the PLL source
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <SysClockConfig+0xf8>)
 80005a0:	6853      	ldr	r3, [r2, #4]
 80005a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a6:	6053      	str	r3, [r2, #4]

	RCC->CR.PLLON = 1;				//Enabling the PLL
 80005a8:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <SysClockConfig+0xf8>)
 80005aa:	6813      	ldr	r3, [r2, #0]
 80005ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005b0:	6013      	str	r3, [r2, #0]

	while(!RCC->CR.PLLRDY);			//Waiting for the PLL to stabilize
 80005b2:	bf00      	nop
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <SysClockConfig+0xf8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f3c3 6340 	ubfx	r3, r3, #25, #1
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d0f8      	beq.n	80005b4 <SysClockConfig+0xc4>

	RCC->CFGR.SW = 2;				//PLL selected as system clock
 80005c2:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <SysClockConfig+0xf8>)
 80005c4:	6893      	ldr	r3, [r2, #8]
 80005c6:	2102      	movs	r1, #2
 80005c8:	f361 0301 	bfi	r3, r1, #0, #2
 80005cc:	6093      	str	r3, [r2, #8]

	while (!(RCC->CFGR.SWS==2)); 	//Waiting for source switch to be made
 80005ce:	bf00      	nop
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <SysClockConfig+0xf8>)
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d1f8      	bne.n	80005d0 <SysClockConfig+0xe0>

	//System_Clock = 168000000;		//Setting the system clock to new value

}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000
 80005f0:	40023c00 	.word	0x40023c00

080005f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <LoopForever+0x6>)
  ldr r1, =_edata
 80005fe:	490d      	ldr	r1, [pc, #52]	; (8000634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <LoopForever+0xe>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000604:	e002      	b.n	800060c <LoopCopyDataInit>

08000606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060a:	3304      	adds	r3, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800060c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000610:	d3f9      	bcc.n	8000606 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000614:	4c0a      	ldr	r4, [pc, #40]	; (8000640 <LoopForever+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000618:	e001      	b.n	800061e <LoopFillZerobss>

0800061a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800061c:	3204      	adds	r2, #4

0800061e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000620:	d3fb      	bcc.n	800061a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000622:	f000 f811 	bl	8000648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000626:	f7ff ff3f 	bl	80004a8 <main>

0800062a <LoopForever>:

LoopForever:
    b LoopForever
 800062a:	e7fe      	b.n	800062a <LoopForever>
  ldr   r0, =_estack
 800062c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000634:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000638:	080006b0 	.word	0x080006b0
  ldr r2, =_sbss
 800063c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000640:	2000001c 	.word	0x2000001c

08000644 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000644:	e7fe      	b.n	8000644 <ADC_IRQHandler>
	...

08000648 <__libc_init_array>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	4d0d      	ldr	r5, [pc, #52]	; (8000680 <__libc_init_array+0x38>)
 800064c:	4c0d      	ldr	r4, [pc, #52]	; (8000684 <__libc_init_array+0x3c>)
 800064e:	1b64      	subs	r4, r4, r5
 8000650:	10a4      	asrs	r4, r4, #2
 8000652:	2600      	movs	r6, #0
 8000654:	42a6      	cmp	r6, r4
 8000656:	d109      	bne.n	800066c <__libc_init_array+0x24>
 8000658:	4d0b      	ldr	r5, [pc, #44]	; (8000688 <__libc_init_array+0x40>)
 800065a:	4c0c      	ldr	r4, [pc, #48]	; (800068c <__libc_init_array+0x44>)
 800065c:	f000 f818 	bl	8000690 <_init>
 8000660:	1b64      	subs	r4, r4, r5
 8000662:	10a4      	asrs	r4, r4, #2
 8000664:	2600      	movs	r6, #0
 8000666:	42a6      	cmp	r6, r4
 8000668:	d105      	bne.n	8000676 <__libc_init_array+0x2e>
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000670:	4798      	blx	r3
 8000672:	3601      	adds	r6, #1
 8000674:	e7ee      	b.n	8000654 <__libc_init_array+0xc>
 8000676:	f855 3b04 	ldr.w	r3, [r5], #4
 800067a:	4798      	blx	r3
 800067c:	3601      	adds	r6, #1
 800067e:	e7f2      	b.n	8000666 <__libc_init_array+0x1e>
 8000680:	080006a8 	.word	0x080006a8
 8000684:	080006a8 	.word	0x080006a8
 8000688:	080006a8 	.word	0x080006a8
 800068c:	080006ac 	.word	0x080006ac

08000690 <_init>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	bf00      	nop
 8000694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000696:	bc08      	pop	{r3}
 8000698:	469e      	mov	lr, r3
 800069a:	4770      	bx	lr

0800069c <_fini>:
 800069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800069e:	bf00      	nop
 80006a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a2:	bc08      	pop	{r3}
 80006a4:	469e      	mov	lr, r3
 80006a6:	4770      	bx	lr
